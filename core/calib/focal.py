import numpy as np

class StrumFocal(object):
    def __init__(self):
        pass
    def __call__(self):
        pass

def solve_focal(s1, s2, u1, u2, u3, v1, v2, v3):
    """ strum's focal calibration """
    u11,u12,u13 = u1[...,0], u1[...,1], u1[...,2]
    u21,u22,u23 = u2[...,0], u2[...,1], u2[...,2]
    u31,u32,u33 = u3[...,0], u3[...,1], u3[...,2]

    v11,v12,v13 = v1[...,0], v1[...,1], v1[...,2]
    v21,v22,v23 = v2[...,0], v2[...,1], v2[...,2]
    v31,v32,v33 = v3[...,0], v3[...,1], v3[...,2]

    a = s1
    b = s2

    fsq1 = - u23*v13*(a*u13*v13+b*u23*v23) / (a*u13*u23*(1-v13*v13)+b*v13*v23*(1-u23*u23))
    fsq2 = - u13*v23*(a*u13*v13+b*u23*v23) / (a*v13*v23*(1-u13*u13)+b*u13*u23*(1-v23*v23))

    alpha = a*a*(1-u13*u13)*(1-v13*v13)-b*b*(1-u23*u23)*(1-v23*v23)
    beta  = a*a*(u13*u13+v13*v13-2*u13*u13*v13*v13)-b*b*(u23*u23+v23*v23-2*u23*u23*v23*v23)
    gamma = a*a*u13*u13*v13*v13-b*b*u23*u23*v23*v23

    fsq3 = (-beta + np.sqrt(beta**2 - 4*alpha*gamma)) / (2*alpha)
    fsq4 = (-beta - np.sqrt(beta**2 - 4*alpha*gamma)) / (2*alpha)

    #fsq1=-(s1*u13*u23*v11**2 + s1*u13*u23*v12**2 + s1*u11*u21*v13**2 + s1*u12*u22*v13**2 - s2*u23**2*v11*v21 - s2*u23**2*v12*v22 - s2*u21**2*v13*v23 - s2*u22**2*v13*v23 + np.sqrt(-4*u23*v13*(s1*(u11*u21 + u12*u22)*(v11**2 + v12**2) - s2*(u21**2 + u22**2)*(v11*v21 + v12*v22))*(s1*u13*v13 - s2*u23*v23) + (s1*(u13*u23*(v11**2 + v12**2) + (u11*u21 + u12*u22)*v13**2) - s2*(u23**2*(v11*v21 + v12*v22) + (u21**2 + u22**2)*v13*v23))**2))/(2.*(s1*(u11*u21 + u12*u22)*(v11**2 + v12**2) - s2*(u21**2 + u22**2)*(v11*v21 + v12*v22)))

    #fsq2=(-(s1*u13*u23*v11**2) - s1*u13*u23*v12**2 - s1*u11*u21*v13**2 - s1*u12*u22*v13**2 + s2*u23**2*v11*v21 + s2*u23**2*v12*v22 + s2*u21**2*v13*v23 + s2*u22**2*v13*v23 + np.sqrt(-4*u23*v13*(s1*(u11*u21 + u12*u22)*(v11**2 + v12**2) - s2*(u21**2 + u22**2)*(v11*v21 + v12*v22))*(s1*u13*v13 - s2*u23*v23) + (s1*(u13*u23*(v11**2 + v12**2) + (u11*u21 + u12*u22)*v13**2) - s2*(u23**2*(v11*v21 + v12*v22) + (u21**2 + u22**2)*v13*v23))**2))/(2.*(s1*(u11*u21 + u12*u22)*(v11**2 + v12**2) - s2*(u21**2 + u22**2)*(v11*v21 + v12*v22)))

    #fsq3=-(s1**2*u13**2*v11**2 + s1**2*u13**2*v12**2 + s1**2*u11**2*v13**2 + s1**2*u12**2*v13**2 - s2**2*u23**2*v21**2 - s2**2*u23**2*v22**2 - s2**2*u21**2*v23**2 - s2**2*u22**2*v23**2 + np.sqrt(-4*(s1**2*(u11**2 + u12**2)*(v11**2 + v12**2) - s2**2*(u21**2 + u22**2)*(v21**2 + v22**2))*(s1**2*u13**2*v13**2 - s2**2*u23**2*v23**2) + (s1**2*(u13**2*(v11**2 + v12**2) + (u11**2 + u12**2)*v13**2) - s2**2*(u23**2*(v21**2 + v22**2) + (u21**2 + u22**2)*v23**2))**2))/(2.*(s1**2*(u11**2 + u12**2)*(v11**2 + v12**2) - s2**2*(u21**2 + u22**2)*(v21**2 + v22**2)))

    #fsq4=(-(s1**2*u13**2*v11**2) - s1**2*u13**2*v12**2 - s1**2*u11**2*v13**2 - s1**2*u12**2*v13**2 + s2**2*u23**2*v21**2 + s2**2*u23**2*v22**2 + s2**2*u21**2*v23**2 + s2**2*u22**2*v23**2 + np.sqrt(-4*(s1**2*(u11**2 + u12**2)*(v11**2 + v12**2) - s2**2*(u21**2 + u22**2)*(v21**2 + v22**2))*(s1**2*u13**2*v13**2 - s2**2*u23**2*v23**2) + (s1**2*(u13**2*(v11**2 + v12**2) + (u11**2 + u12**2)*v13**2) - s2**2*(u23**2*(v21**2 + v22**2) + (u21**2 + u22**2)*v23**2))**2))/(2.*(s1**2*(u11**2 + u12**2)*(v11**2 + v12**2) - s2**2*(u21**2 + u22**2)*(v21**2 + v22**2)))

    fsq = np.concatenate([fsq1.ravel(), fsq2.ravel(), fsq3.ravel(), fsq4.ravel()])
    msk = np.logical_and.reduce([
        np.isfinite(fsq),
        np.isreal(fsq),
        fsq > 0,
        #np.logical_not( np.isclose(fsq, 1.0) )
        ])
    foc = np.sqrt( fsq[msk] )
    np.save('/tmp/focs.npy', foc)
    #plt.hist(foc)
    #plt.show()
    return np.median( foc )


